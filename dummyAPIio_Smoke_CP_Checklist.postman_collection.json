{
	"info": {
		"_postman_id": "f789f6d2-fb27-45cc-b713-31d62231b1b1",
		"name": "dummyAPIio_Smoke_CP_Checklist",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25693380"
	},
	"item": [
		{
			"name": "Smoke",
			"item": [
				{
					"name": "Create User NoAuth 403 APP_ID_MISSING",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Body matches string APP_ID_MISSING\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"APP_ID_MISSING\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"firstName_1\",\r\n    \"lastName\": \"lastName_1\",\r\n    \"gender\": \"\",\r\n    \"email\": \"email1@email.com\",\r\n    \"dateOfBirth\": \"01/01/1990\",\r\n    \"phone\": \"+7 900 9999999\",\r\n    \"picture\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User List Auth_InvalidAppID 403 APP_ID_MISSING",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Body matches string APP_ID_MISSING\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"APP_ID_MISSING\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "649bf016bb0f223608d48cfd",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User nullRequiredParam 400 BODY_NOT_VALID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string BODY_NOT_VALID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"BODY_NOT_VALID\");\r",
									"});\r",
									"pm.test(\"Body matches string Path `email` is required.\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Path `email` is required.\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName` is required.\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName` is required.\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName` is required.\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName` is required.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"\",\r\n    \"email\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List /user?page=2&limit=5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches title string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches firstName string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches lastName string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user?page=2&limit=5",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List /post?page=2&limit=50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches text string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"pm.test(\"Body matches likes string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
									"});\r",
									"pm.test(\"Body matches image string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"image\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post?page=2&limit=50",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"userId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string namename1@mailmail.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"namename1@mailmail.com\");\r",
									"});\r",
									"pm.test(\"Body matches string NameName1\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameName1\");\r",
									"});\r",
									"pm.test(\"Body matches string NameNameName1\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameNameName1\");\r",
									"});\r",
									"pm.test(\"Body matches string mr\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mr\");\r",
									"});\r",
									"pm.test(\"Body matches string other\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"other\");\r",
									"});\r",
									"pm.test(\"Body matches picture string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 900 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 900 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches location string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string Enother Streeet\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Enother Streeet\");\r",
									"});\r",
									"pm.test(\"Body matches string NewYork\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NewYork\");\r",
									"});\r",
									"pm.test(\"Body matches string NY\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NY\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string -4:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"-4:00\");\r",
									"});\r",
									"pm.test(\"Body matches registerDate string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches updatedDate string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"NameName1\",\r\n    \"lastName\": \"NameNameName1\",\r\n    \"gender\": \"other\",\r\n    \"email\": \"namename1@mailmail.com\",\r\n    \"dateOfBirth\": \"01/01/1990\",\r\n    \"phone\": \"+7 900 9999999\",\r\n    \"picture\": \"\",\r\n    \"location\":\r\n        {\r\n            \"street\": \"Enother Streeet\",\r\n            \"city\": \"NewYork\",\r\n            \"state\": \"NY\",\r\n            \"country\": \"US\",\r\n            \"timezone\": \"-4:00\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"userId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string namename1@mailmail.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"namename1@mailmail.com\");\r",
									"});\r",
									"pm.test(\"Body matches string NameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string NameNameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameNameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string mrs\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mrs\");\r",
									"});\r",
									"pm.test(\"Body matches string male\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"male\");\r",
									"});\r",
									"pm.test(\"Body matches string https://i.imgur.com/u6Q0Puw.png\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://i.imgur.com/u6Q0Puw.png\");\r",
									"});\r",
									"pm.test(\"Body matches string 1992-02-02T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1992-02-02T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 902 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 902 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches location string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string Enother2 Streeet\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Enother2 Streeet\");\r",
									"});\r",
									"pm.test(\"Body matches string NewYork2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NewYork2\");\r",
									"});\r",
									"pm.test(\"Body matches string NY2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NY2\");\r",
									"});\r",
									"pm.test(\"Body matches string US2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US2\");\r",
									"});\r",
									"pm.test(\"Body matches string -2:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"-2:00\");\r",
									"});\r",
									"pm.test(\"Body matches registerDate string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches updatedDate string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mrs\",\r\n    \"firstName\": \"NameName2\",\r\n    \"lastName\": \"NameNameName2\",\r\n    \"gender\": \"male\",\r\n    \"dateOfBirth\": \"02/02/1992\",\r\n    \"phone\": \"+7 902 9999999\",\r\n    \"picture\": \"https://i.imgur.com/u6Q0Puw.png\",\r\n    \"location\":\r\n        {\r\n            \"street\": \"Enother2 Streeet\",\r\n            \"city\": \"NewYork2\",\r\n            \"state\": \"NY2\",\r\n            \"country\": \"US2\",\r\n            \"timezone\": \"-2:00\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"userId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string namename1@mailmail.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"namename1@mailmail.com\");\r",
									"});\r",
									"pm.test(\"Body matches string NameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string NameNameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameNameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string mrs\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mrs\");\r",
									"});\r",
									"pm.test(\"Body matches string male\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"male\");\r",
									"});\r",
									"pm.test(\"Body matches string https://i.imgur.com/u6Q0Puw.png\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://i.imgur.com/u6Q0Puw.png\");\r",
									"});\r",
									"pm.test(\"Body matches string 1992-02-02T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1992-02-02T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 902 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 902 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches location string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string Enother2 Streeet\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Enother2 Streeet\");\r",
									"});\r",
									"pm.test(\"Body matches string NewYork2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NewYork2\");\r",
									"});\r",
									"pm.test(\"Body matches string NY2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NY2\");\r",
									"});\r",
									"pm.test(\"Body matches string US2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US2\");\r",
									"});\r",
									"pm.test(\"Body matches string -2:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"-2:00\");\r",
									"});\r",
									"pm.test(\"Body matches registerDate string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches updatedDate string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"postId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string https://i.imgur.com/HFXynW3.png\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://i.imgur.com/HFXynW3.png\");\r",
									"});\r",
									"pm.test(\"Body matches string 1\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1\");\r",
									"});\r",
									"pm.test(\"Body matches string Tag1\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Tag1\");\r",
									"});\r",
									"pm.test(\"Body matches string Post 1 text\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Post 1 text\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string mrs\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mrs\");\r",
									"});\r",
									"pm.test(\"Body matches string NameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string NameNameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameNameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string https://i.imgur.com/u6Q0Puw.png\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://i.imgur.com/u6Q0Puw.png\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Post 1 text\",\r\n    \"image\": \"https://i.imgur.com/HFXynW3.png\",\r\n    \"likes\": 1,\r\n    \"tags\": \"Tag1\",\r\n    \"owner\": \"{{userId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string https://i.imgur.com/nE4N7js.png\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://i.imgur.com/nE4N7js.png\");\r",
									"});\r",
									"pm.test(\"Body matches string 2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"2\");\r",
									"});\r",
									"pm.test(\"Body matches string Tag2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Tag2\");\r",
									"});\r",
									"pm.test(\"Body matches string Post 1 UPDATED text\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Post 1 UPDATED text\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string mrs\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mrs\");\r",
									"});\r",
									"pm.test(\"Body matches string NameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string NameNameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameNameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string https://i.imgur.com/u6Q0Puw.png\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://i.imgur.com/u6Q0Puw.png\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Post 1 UPDATED text\",\r\n    \"image\": \"https://i.imgur.com/nE4N7js.png\",\r\n    \"likes\": 2,\r\n    \"tags\":\r\n        [\r\n            \"Tag1\",\r\n            \"Tag2\"\r\n        ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"commentId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Message 1 comment\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Message 1 comment\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string mrs\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mrs\");\r",
									"});\r",
									"pm.test(\"Body matches string NameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string NameNameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameNameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string https://i.imgur.com/u6Q0Puw.png\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://i.imgur.com/u6Q0Puw.png\");\r",
									"});\r",
									"pm.test(\"Body matches string post\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"post\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"Message 1 comment\",\r\n    \"owner\": \"{{userId}}\",\r\n    \"post\": \"{{postId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List By User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Message 1 comment\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Message 1 comment\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string mrs\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mrs\");\r",
									"});\r",
									"pm.test(\"Body matches string NameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string NameNameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameNameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string https://i.imgur.com/u6Q0Puw.png\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://i.imgur.com/u6Q0Puw.png\");\r",
									"});\r",
									"pm.test(\"Body matches string post\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"post\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string total\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"total\");\r",
									"});\r",
									"pm.test(\"Body matches string 0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0\");\r",
									"});\r",
									"pm.test(\"Body matches string 20\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"20\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}/comment",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List By Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Message 1 comment\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Message 1 comment\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string mrs\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mrs\");\r",
									"});\r",
									"pm.test(\"Body matches string NameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string NameNameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameNameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string https://i.imgur.com/u6Q0Puw.png\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://i.imgur.com/u6Q0Puw.png\");\r",
									"});\r",
									"pm.test(\"Body matches string post\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"post\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string total\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"total\");\r",
									"});\r",
									"pm.test(\"Body matches string 0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0\");\r",
									"});\r",
									"pm.test(\"Body matches string 20\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"20\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}/comment",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List By User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string https://i.imgur.com/nE4N7js.png\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://i.imgur.com/nE4N7js.png\");\r",
									"});\r",
									"pm.test(\"Body matches string 2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"2\");\r",
									"});\r",
									"pm.test(\"Body matches string Tag1\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Tag1\");\r",
									"});\r",
									"pm.test(\"Body matches string Post 1 UPDATED text\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Post 1 UPDATED text\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string mrs\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mrs\");\r",
									"});\r",
									"pm.test(\"Body matches string NameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string NameNameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameNameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string https://i.imgur.com/u6Q0Puw.png\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://i.imgur.com/u6Q0Puw.png\");\r",
									"});\r",
									"pm.test(\"Body matches string 1\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1\");\r",
									"});\r",
									"pm.test(\"Body matches string 0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0\");\r",
									"});\r",
									"pm.test(\"Body matches string 20\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"20\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}/post",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List By Tag",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/tag/Tag2/post",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"tag",
								"Tag2",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string https://i.imgur.com/nE4N7js.png\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://i.imgur.com/nE4N7js.png\");\r",
									"});\r",
									"pm.test(\"Body matches string 2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"2\");\r",
									"});\r",
									"pm.test(\"Body matches string Tag1\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Tag1\");\r",
									"});\r",
									"pm.test(\"Body matches string Post 1 UPDATED text\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Post 1 UPDATED text\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string mrs\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mrs\");\r",
									"});\r",
									"pm.test(\"Body matches string NameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string NameNameName2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"NameNameName2\");\r",
									"});\r",
									"pm.test(\"Body matches string https://i.imgur.com/u6Q0Puw.png\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://i.imgur.com/u6Q0Puw.png\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/{{commentId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Critical Path and some Extended",
			"item": [
				{
					"name": "Create User NoAuth 403 APP_ID_MISSING",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Body matches string APP_ID_MISSING\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"APP_ID_MISSING\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"abc\",\r\n    \"lastName\": \"xyz\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"namename@domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 900 9999999\",\r\n    \"picture\": \"https://i.imgur.com/6yiDc2D.png\",\r\n    \"location\":\r\n        {\r\n            \"street\": \"Street\",\r\n            \"city\": \"City\",\r\n            \"state\": \"State\",\r\n            \"country\": \"Country\",\r\n            \"timezone\": \"-1:00\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User List AuthInvalidAppID 403 APP_ID_MISSING",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Body matches string APP_ID_MISSING\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"APP_ID_MISSING\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "649bf016bb0f223608d48cfd",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Post NoAuth 403 APP_ID_MISSING",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Body matches string APP_ID_MISSING\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"APP_ID_MISSING\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/60d0fe4f5311236168a109fa/post",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"60d0fe4f5311236168a109fa",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Comment AuthInvalidAppID 403 APP_ID_MISSING",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Body matches string APP_ID_MISSING\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"APP_ID_MISSING\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "649bf016bb0f223608d48cfe",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/60d0fe4f5311236168a109fa/comment",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"60d0fe4f5311236168a109fa",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User NullRequiredParam 400 BODY_NOT_VALID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string BODY_NOT_VALID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"BODY_NOT_VALID\");\r",
									"});\r",
									"pm.test(\"Body matches string Path `email` is required.\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Path `email` is required.\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName` is required.\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName` is required.\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName` is required.\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName` is required.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 900 9999999\",\r\n    \"picture\": \"https://i.imgur.com/6yiDc2D.png\",\r\n    \"location\":\r\n        {\r\n            \"street\": \"Street\",\r\n            \"city\": \"City\",\r\n            \"state\": \"State\",\r\n            \"country\": \"Country\",\r\n            \"timezone\": \"-1:00\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User XSSname (bug001)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"userId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string mr\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mr\");\r",
									"});\r",
									"pm.test(\"Body matches string <script>alert(123)</script>\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"<script>alert(123)</script>\");\r",
									"});\r",
									"pm.test(\"Body matches string <script>alert(456)</script>\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"<script>alert(456)</script>\");\r",
									"});\r",
									"pm.test(\"Body matches string ttps://i.imgur.com/6yiDc2D.png\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"ttps://i.imgur.com/6yiDc2D.png\");\r",
									"});\r",
									"pm.test(\"Body matches string male\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"male\");\r",
									"});\r",
									"pm.test(\"Body matches string namename111@domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"namename111@domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 900 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 900 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string Street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Street\");\r",
									"});\r",
									"pm.test(\"Body matches string City\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"City\");\r",
									"});\r",
									"pm.test(\"Body matches string State\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"State\");\r",
									"});\r",
									"pm.test(\"Body matches string Country\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Country\");\r",
									"});\r",
									"pm.test(\"Body matches string -1:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"-1:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"<script>alert(123)</script>\",\r\n    \"lastName\": \"<script>alert(456)</script>\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"namename111@domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 900 9999999\",\r\n    \"picture\": \"https://i.imgur.com/6yiDc2D.png\",\r\n    \"location\":\r\n        {\r\n            \"street\": \"Street\",\r\n            \"city\": \"City\",\r\n            \"state\": \"State\",\r\n            \"country\": \"Country\",\r\n            \"timezone\": \"-1:00\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User XSSname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User SQLname (bug001)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"userId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string mr\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mr\");\r",
									"});\r",
									"pm.test(\"Body matches string select * from admins;\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"select * from admins;\");\r",
									"});\r",
									"pm.test(\"Body matches string drop table admins rollback;\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"drop table admins rollback;\");\r",
									"});\r",
									"pm.test(\"Body matches string ttps://i.imgur.com/6yiDc2D.png\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"ttps://i.imgur.com/6yiDc2D.png\");\r",
									"});\r",
									"pm.test(\"Body matches string male\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"male\");\r",
									"});\r",
									"pm.test(\"Body matches string namename2@domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"namename2@domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 900 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 900 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string Street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Street\");\r",
									"});\r",
									"pm.test(\"Body matches string City\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"City\");\r",
									"});\r",
									"pm.test(\"Body matches string State\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"State\");\r",
									"});\r",
									"pm.test(\"Body matches string Country\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Country\");\r",
									"});\r",
									"pm.test(\"Body matches string -1:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"-1:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"select * from admins;\",\r\n    \"lastName\": \"drop table admins rollback;\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"namename2@domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 900 9999999\",\r\n    \"picture\": \"https://i.imgur.com/6yiDc2D.png\",\r\n    \"location\":\r\n        {\r\n            \"street\": \"Street\",\r\n            \"city\": \"City\",\r\n            \"state\": \"State\",\r\n            \"country\": \"Country\",\r\n            \"timezone\": \"-1:00\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User SQLname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User 1CharParams 400 BODY_NOT_VALID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string BODY_NOT_VALID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"BODY_NOT_VALID\");\r",
									"});\r",
									"pm.test(\"Body matches string Path `firstName` (`a`) is shorter than the minimum allowed length (2).\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Path `firstName` (`a`) is shorter than the minimum allowed length (2).\");\r",
									"});\r",
									"pm.test(\"Body matches string `` is not a valid enum value for path `gender`.\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"`` is not a valid enum value for path `gender`.\");\r",
									"});\r",
									"pm.test(\"Body matches string Path `lastName` (`x`) is shorter than the minimum allowed length (2).\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Path `lastName` (`x`) is shorter than the minimum allowed length (2).\");\r",
									"});\r",
									"pm.test(\"Body matches string Path `phone` (``) is shorter than the minimum allowed length (5).\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Path `phone` (``) is shorter than the minimum allowed length (5).\");\r",
									"});\r",
									"pm.test(\"Body matches string `` is not a valid enum value for path `title`.\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"`` is not a valid enum value for path `title`.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"\",\r\n    \"firstName\": \"a\",\r\n    \"lastName\": \"x\",\r\n    \"gender\": \"\",\r\n    \"email\": \"namename5@domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"\",\r\n    \"picture\": \"h\",\r\n    \"location\":\r\n        {\r\n            \"street\": \"s\",\r\n            \"city\": \"c\",\r\n            \"state\": \"s\",\r\n            \"country\": \"c\",\r\n            \"timezone\": \"-\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User 1CharLocation (bug002)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"userId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string mr\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mr\");\r",
									"});\r",
									"pm.test(\"Body matches string abcde\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"abcde\");\r",
									"});\r",
									"pm.test(\"Body matches string xyz000\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"xyz000\");\r",
									"});\r",
									"pm.test(\"Body matches string male\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"male\");\r",
									"});\r",
									"pm.test(\"Body matches string namename6@domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"namename6@domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string s\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"s\");\r",
									"});\r",
									"pm.test(\"Body matches string c\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"c\");\r",
									"});\r",
									"pm.test(\"Body matches string g\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"g\");\r",
									"});\r",
									"pm.test(\"Body matches string o\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"o\");\r",
									"});\r",
									"pm.test(\"Body matches string -\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"-\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"abcde\",\r\n    \"lastName\": \"xyz000\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"namename6@domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\",\r\n    \"location\":\r\n        {\r\n            \"street\": \"s\",\r\n            \"city\": \"c\",\r\n            \"state\": \"g\",\r\n            \"country\": \"o\",\r\n            \"timezone\": \"-\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User 1CharLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User numName (bug001)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"userId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string mr\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mr\");\r",
									"});\r",
									"pm.test(\"Body matches string 55\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"55\");\r",
									"});\r",
									"pm.test(\"Body matches string 11\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"11\");\r",
									"});\r",
									"pm.test(\"Body matches string male\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"male\");\r",
									"});\r",
									"pm.test(\"Body matches string namename7@domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"namename7@domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": 55,\r\n    \"lastName\": 11,\r\n    \"gender\": \"male\",\r\n    \"email\": \"namename7@domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User numName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User minName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"userId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string mr\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mr\");\r",
									"});\r",
									"pm.test(\"Body matches string ab\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"ab\");\r",
									"});\r",
									"pm.test(\"Body matches string xy\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"xy\");\r",
									"});\r",
									"pm.test(\"Body matches string male\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"male\");\r",
									"});\r",
									"pm.test(\"Body matches string namename8@domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"namename8@domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"ab\",\r\n    \"lastName\": \"xy\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"namename8@domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User existingEmail 400 BODY_NOT_VALID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string BODY_NOT_VALID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"BODY_NOT_VALID\");\r",
									"});\r",
									"pm.test(\"Body matches string Email already used\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Email already used\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mrs\",\r\n    \"firstName\": \"abc\",\r\n    \"lastName\": \"xyz\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{email}}\",\r\n    \"dateOfBirth\": \"1/1/1991\",\r\n    \"phone\": \"+7 951 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User minName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User minName 404 RESOURCE_NOT_FOUND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body matches string RESOURCE_NOT_FOUND\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"RESOURCE_NOT_FOUND\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User max30charsName (bug003)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"userId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string mr\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mr\");\r",
									"});\r",
									"pm.test(\"Body matches string Abc30defghijklmnopqrstuvwxyzAb\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Abc30defghijklmnopqrstuvwxyzAb\");\r",
									"});\r",
									"pm.test(\"Body matches string xyz30xyzxyzxyzxyzxyzxyzxyzxyzx\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"xyz30xyzxyzxyzxyzxyzxyzxyzxyzx\");\r",
									"});\r",
									"pm.test(\"Body matches string male\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"male\");\r",
									"});\r",
									"pm.test(\"Body matches string namename9@domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"namename9@domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"Abc30defghijklmnopqrstuvwxyzAb\",\r\n    \"lastName\": \"xyz30xyzxyzxyzxyzxyzxyzxyzxyzx\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"namename9@domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User max30charsName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User overLengthName 400 BODY_NOT_VALID (bug003)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string BODY_NOT_VALID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"BODY_NOT_VALID\");\r",
									"});\r",
									"pm.test(\"Body matches string Path `firstName` (`Abc31defghijklmnopqrstuvwxyzAbc`) is longer than the maximum allowed length (30).\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Path `firstName` (`Abc31defghijklmnopqrstuvwxyzAbc`) is longer than the maximum allowed length (30).\");\r",
									"});\r",
									"pm.test(\"Body matches string Path `lastName` (`xyz31xyzxyzxyzxyzxyzxyzxyzxyzxy`) is longer than the maximum allowed length (30).\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Path `lastName` (`xyz31xyzxyzxyzxyzxyzxyzxyzxyzxy`) is longer than the maximum allowed length (30).\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"Abc31defghijklmnopqrstuvwxyzAbc\",\r\n    \"lastName\": \"xyz31xyzxyzxyzxyzxyzxyzxyzxyzxy\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"namename10@domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User spaceName 400 BODY_NOT_VALID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string BODY_NOT_VALID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"BODY_NOT_VALID\");\r",
									"});\r",
									"pm.test(\"Body matches string Path `firstName` is required..\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Path `firstName` is required.\");\r",
									"});\r",
									"pm.test(\"Body matches string Path `lastName` is required.\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Path `lastName` is required.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"       \",\r\n    \"lastName\": \"       \",\r\n    \"gender\": \"male\",\r\n    \"email\": \"namename11@domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User fixEdgeSpaceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"userId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string mr\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mr\");\r",
									"});\r",
									"pm.test(\"Body matches string abc\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"abc\");\r",
									"});\r",
									"pm.test(\"Body matches string xyz\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"xyz\");\r",
									"});\r",
									"pm.test(\"Body matches string male\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"male\");\r",
									"});\r",
									"pm.test(\"Body matches string namename12@domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"namename12@domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \" abc\",\r\n    \"lastName\": \"xyz \",\r\n    \"gender\": \"male\",\r\n    \"email\": \"namename12@domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User fixEdgeSpaceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User 1charNameAfterFixSpaces 400 BODY_NOT_VALID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string BODY_NOT_VALID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"BODY_NOT_VALID\");\r",
									"});\r",
									"pm.test(\"Body matches string Path `firstName` (`a`) is shorter than the minimum allowed length (2).\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Path `firstName` (`a`) is shorter than the minimum allowed length (2).\");\r",
									"});\r",
									"pm.test(\"Body matches string Path `lastName` (`x`) is shorter than the minimum allowed length (2).\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Path `lastName` (`x`) is shorter than the minimum allowed length (2).\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"  a\",\r\n    \"lastName\": \"x  \",\r\n    \"gender\": \"male\",\r\n    \"email\": \"namename13@domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User asiaName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"userId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string mr\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mr\");\r",
									"});\r",
									"pm.test(\"Body matches string 中國皮卡丘\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"中國皮卡丘\");\r",
									"});\r",
									"pm.test(\"Body matches string 日本のピカチュウ, 한국\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"日本のピカチュウ, 한국\");\r",
									"});\r",
									"pm.test(\"Body matches string male\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"male\");\r",
									"});\r",
									"pm.test(\"Body matches string namename190@domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"namename190@domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"中國皮卡丘\",\r\n    \"lastName\": \"日本のピカチュウ, 한국\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"namename190@domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User asiaName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string mr\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mr\");\r",
									"});\r",
									"pm.test(\"Body matches string 中國皮卡丘\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"中國皮卡丘\");\r",
									"});\r",
									"pm.test(\"Body matches string 日本のピカチュウ, 한국\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"日本のピカチュウ, 한국\");\r",
									"});\r",
									"pm.test(\"Body matches string male\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"male\");\r",
									"});\r",
									"pm.test(\"Body matches string namename190@domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"namename190@domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User asiaName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User asiaEmail euroName 400 BODY_NOT_VALID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string BODY_NOT_VALID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"BODY_NOT_VALID\");\r",
									"});\r",
									"pm.test(\"Body matches string Path `email` is invalid (中國皮卡丘@中國皮卡丘.com).\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Path `email` is invalid (中國皮卡丘@中國皮卡丘.com).\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"한국 Pikachu\",\r\n    \"lastName\": \"Français\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"中國皮卡丘@中國皮卡丘.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User email@less 400 BODY_NOT_VALID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string BODY_NOT_VALID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"BODY_NOT_VALID\");\r",
									"});\r",
									"pm.test(\"Body matches string Path `email` is invalid (namename.domain.com).\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Path `email` is invalid (namename.domain.com).\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"name\",\r\n    \"lastName\": \"name\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"namename.domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User email@@ 400 BODY_NOT_VALID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string BODY_NOT_VALID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"BODY_NOT_VALID\");\r",
									"});\r",
									"pm.test(\"Body matches string Path `email` is invalid (namename@@domain.com).\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Path `email` is invalid (namename@@domain.com).\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"name\",\r\n    \"lastName\": \"name\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"namename@@domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User fixEdgeSpaceEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"userId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string mr\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mr\");\r",
									"});\r",
									"pm.test(\"Body matches string name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"});\r",
									"pm.test(\"Body matches string name2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name2\");\r",
									"});\r",
									"pm.test(\"Body matches string male\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"male\");\r",
									"});\r",
									"pm.test(\"Body matches string namename145@domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"namename145@domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"name\",\r\n    \"lastName\": \"name2\",\r\n    \"gender\": \"male\",\r\n    \"email\": \" namename145@domain.com \",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User fixEdgeSpaceEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User emailTailSpaceName 400 BODY_NOT_VALID",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"name\",\r\n    \"lastName\": \"name\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"namename15 @domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User emailInnerSpaceDomain 400 BODY_NOT_VALID",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"name\",\r\n    \"lastName\": \"name\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"namename15@domain .com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User emailNameLes 400 BODY_NOT_VALID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string BODY_NOT_VALID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"BODY_NOT_VALID\");\r",
									"});\r",
									"pm.test(\"Body matches string Path `email` is invalid (@domain.com).\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Path `email` is invalid (@domain.com).\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"name\",\r\n    \"lastName\": \"name\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"@domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User emailDomainLess 400 BODY_NOT_VALID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string BODY_NOT_VALID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"BODY_NOT_VALID\");\r",
									"});\r",
									"pm.test(\"Body matches string Path `email` is invalid (namename16@domain).\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Path `email` is invalid (namename16@domain).\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"name\",\r\n    \"lastName\": \"name\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"namename16@domain\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User email--name 400 BODY_NOT_VALID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string BODY_NOT_VALID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"BODY_NOT_VALID\");\r",
									"});\r",
									"pm.test(\"Body matches string Path `email` is invalid (name--name@domain.com).\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Path `email` is invalid (name--name@domain.com).\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"firstName\": \"name\",\r\n    \"lastName\": \"name\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"name--name@domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User List autoFixLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string total\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"total\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":3\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":3\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user?page=3&limit=4",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user"
							],
							"query": [
								{
									"key": "page",
									"value": "3"
								},
								{
									"key": "limit",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User List autoFixLimit1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string total\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"total\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":50\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":50\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user?page=0&limit=51",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "51"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User List Params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string total\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"total\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user?page=0&limit=5",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User List Params1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string total\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"total\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":2\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":50\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":50\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user?page=2&limit=50",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User List nullList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string data\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"pm.test(\"Body matches string total\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"total\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":999\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":50\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":50\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user?page=999&limit=50",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user"
							],
							"query": [
								{
									"key": "page",
									"value": "999"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List fixLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string total\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"total\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":3\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":3\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post?page=3&limit=4",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "3"
								},
								{
									"key": "limit",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List fixLimit1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string total\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"total\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":50\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":50\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post?page=0&limit=51",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "51"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string total\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"total\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post?page=0&limit=5",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string total\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"total\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":16\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":16\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":50\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":50\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post?page=16&limit=50",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "16"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List nullList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string data\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"pm.test(\"Body matches string total\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"total\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":999\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":50\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":50\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post?page=999&limit=50",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "999"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User Create exceedingMaxLocationValues (bug002)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"userId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mrs\",\r\n    \"firstName\": \"Bella\",\r\n    \"lastName\": \"Fortune-teller\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"name.name22@domain.domain.com\",\r\n    \"dateOfBirth\": \"1/1/1999\",\r\n    \"phone\": \"+7 900 9999999\",\r\n    \"location\":\r\n        {\r\n            \"street\":\"abc101abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopq\",\r\n            \"city\":\"abc31abcdefghijklmnopqrstuvwxyz\",\r\n            \"state\":\"xyz31xyzxyzxyzxyzxyzxyzxyzxyzxy\",\r\n            \"country\":\"fuu31uuuuuuuuuuuuuuuuuuuuuuuuuu\",\r\n            \"timezone\":\"+13:00\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User exceedingMaxLocationValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Create maxLocationValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"userId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string mrs\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mrs\");\r",
									"});\r",
									"pm.test(\"Body matches string Bella\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bella\");\r",
									"});\r",
									"pm.test(\"Body matches string Fortune-teller\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Fortune-teller\");\r",
									"});\r",
									"pm.test(\"Body matches string female\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"female\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name22@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name22@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1999-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1999-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 900 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 900 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string abc100abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnop\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"abc100abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnop\");\r",
									"});\r",
									"pm.test(\"Body matches string abc30abcdefghijklmnopqrstuvwxy\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"abc30abcdefghijklmnopqrstuvwxy\");\r",
									"});\r",
									"pm.test(\"Body matches string xyz30xyzxyzxyzxyzxyzxyzxyzxyzx\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"xyz30xyzxyzxyzxyzxyzxyzxyzxyzx\");\r",
									"});\r",
									"pm.test(\"Body matches string fuu30uuuuuuuuuuuuuuuuuuuuuuuuu\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"fuu30uuuuuuuuuuuuuuuuuuuuuuuuu\");\r",
									"});\r",
									"pm.test(\"Body matches string +12:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+12:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mrs\",\r\n    \"firstName\": \"Bella\",\r\n    \"lastName\": \"Fortune-teller\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"name.name22@domain.domain.com\",\r\n    \"dateOfBirth\": \"1/1/1999\",\r\n    \"phone\": \"+7 900 9999999\",\r\n    \"location\":\r\n        {\r\n            \"street\": \"abc100abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnop\",\r\n            \"city\": \"abc30abcdefghijklmnopqrstuvwxy\",\r\n            \"state\": \"xyz30xyzxyzxyzxyzxyzxyzxyzxyzx\",\r\n            \"country\": \"fuu30uuuuuuuuuuuuuuuuuuuuuuuuu\",\r\n            \"timezone\": \"+12:00\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update exceedingMaxLocationValues (bug002)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string mrs\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mrs\");\r",
									"});\r",
									"pm.test(\"Body matches string Bella\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bella\");\r",
									"});\r",
									"pm.test(\"Body matches string Fortune-teller\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Fortune-teller\");\r",
									"});\r",
									"pm.test(\"Body matches string female\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"female\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name22@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name22@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1999-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1999-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 900 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 900 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string abc101abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopq\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"abc101abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopq\");\r",
									"});\r",
									"pm.test(\"Body matches string abc31abcdefghijklmnopqrstuvwxyz\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"abc31abcdefghijklmnopqrstuvwxyz\");\r",
									"});\r",
									"pm.test(\"Body matches string xyz31xyzxyzxyzxyzxyzxyzxyzxyzxy\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"xyz31xyzxyzxyzxyzxyzxyzxyzxyzxy\");\r",
									"});\r",
									"pm.test(\"Body matches string fuu31uuuuuuuuuuuuuuuuuuuuuuuuuu\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"fuu31uuuuuuuuuuuuuuuuuuuuuuuuuu\");\r",
									"});\r",
									"pm.test(\"Body matches string +13:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+13:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mrs\",\r\n    \"firstName\": \"Bella\",\r\n    \"lastName\": \"Fortune-teller\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"name.name22@domain.domain.com\",\r\n    \"dateOfBirth\": \"1/1/1999\",\r\n    \"phone\": \"+7 900 9999999\",\r\n    \"location\":\r\n        {\r\n            \"street\":\"abc101abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopq\",\r\n            \"city\":\"abc31abcdefghijklmnopqrstuvwxyz\",\r\n            \"state\":\"xyz31xyzxyzxyzxyzxyzxyzxyzxyzxy\",\r\n            \"country\":\"fuu31uuuuuuuuuuuuuuuuuuuuuuuuuu\",\r\n            \"timezone\":\"+13:00\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update asiaLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string mrs\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mrs\");\r",
									"});\r",
									"pm.test(\"Body matches string Bella\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bella\");\r",
									"});\r",
									"pm.test(\"Body matches string Fortune-teller\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Fortune-teller\");\r",
									"});\r",
									"pm.test(\"Body matches string female\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"female\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name22@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name22@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1999-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1999-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 900 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 900 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 中國皮卡丘中國皮卡丘\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"中國皮卡丘中國皮卡丘\");\r",
									"});\r",
									"pm.test(\"Body matches string 日本のピカチュウ\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"日本のピカチュウ\");\r",
									"});\r",
									"pm.test(\"Body matches string 한국\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"한국\");\r",
									"});\r",
									"pm.test(\"Body matches string 한국한국\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"한국한국\");\r",
									"});\r",
									"pm.test(\"Body matches string -1:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"-1:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mrs\",\r\n    \"firstName\": \"Bella\",\r\n    \"lastName\": \"Fortune-teller\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"name.name22@domain.domain.com\",\r\n    \"dateOfBirth\": \"1/1/1999\",\r\n    \"phone\": \"+7 900 9999999\",\r\n    \"location\":\r\n        {\r\n            \"street\":\"中國皮卡丘中國皮卡丘\",\r\n            \"city\":\"日本のピカチュウ\",\r\n            \"state\":\"한국\",\r\n            \"country\":\"한국한국\",\r\n            \"timezone\":\"-1:00\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update spaceLocation (bug009)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string mrs\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mrs\");\r",
									"});\r",
									"pm.test(\"Body matches string Bella\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bella\");\r",
									"});\r",
									"pm.test(\"Body matches string Fortune-teller\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Fortune-teller\");\r",
									"});\r",
									"pm.test(\"Body matches string female\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"female\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name22@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name22@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1999-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1999-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 900 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 900 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string  space\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\" space\");\r",
									"});\r",
									"pm.test(\"Body matches string  space \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\" space \");\r",
									"});\r",
									"pm.test(\"Body matches string            \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"           \");\r",
									"});\r",
									"pm.test(\"Body matches string s          \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"s          \");\r",
									"});\r",
									"pm.test(\"Body matches string +1:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+1:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mrs\",\r\n    \"firstName\": \"Bella\",\r\n    \"lastName\": \"Fortune-teller\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"name.name22@domain.domain.com\",\r\n    \"dateOfBirth\": \"1/1/1999\",\r\n    \"phone\": \"+7 900 9999999\",\r\n    \"location\":\r\n        {\r\n            \"street\":\" space\",\r\n            \"city\":\" space \",\r\n            \"state\":\"           \",\r\n            \"country\":\"s          \",\r\n            \"timezone\":\"+1:00\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update corruptedJSONkeysLocation (bug011)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string mrs\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mrs\");\r",
									"});\r",
									"pm.test(\"Body matches string Bella\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bella\");\r",
									"});\r",
									"pm.test(\"Body matches string Fortune-teller\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Fortune-teller\");\r",
									"});\r",
									"pm.test(\"Body matches string female\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"female\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name22@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name22@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1999-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1999-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 900 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 900 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mrs\",\r\n    \"firstName\": \"Bella\",\r\n    \"lastName\": \"Fortune-teller\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"name.name22@domain.domain.com\",\r\n    \"dateOfBirth\": \"1/1/1999\",\r\n    \"phone\": \"+7 900 9999999\",\r\n    \"location\":\r\n        {\r\n            \"stREEt\":\"space\",\r\n            \"ciTY\":\"space\",\r\n            \"sTATe\":\"space\",\r\n            \"cOuNtRy\":\"space\",\r\n            \"tiMEZone\":\"+7:00\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User maxLocationValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Create minParams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"userId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string male\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"male\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"dr\",\r\n    \"firstName\": \"Richard\",\r\n    \"lastName\": \"Richardson\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"name.name20@domain.domain.com\",\r\n    \"dateOfBirth\": \"1/1/1990\",\r\n    \"phone\": \"+7 950 9999999\",\r\n    \"location\":\r\n        {\r\n            \"street\": \"109 street\",\r\n            \"city\": \"NY\",\r\n            \"state\": \"NY\",\r\n            \"country\": \"US\",\r\n            \"timezone\": \"0:00\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update noEmailUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string male\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"male\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User By Id minParams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string male\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"male\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update titleGender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"\",\r\n    \"gender\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update titleGender1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"other\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"other\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"\",\r\n    \"gender\": \"other\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update titleGender1_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"other\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"other\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"\",\r\n    \"gender\": \"other\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update titleGender2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"dr\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"dr\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"male\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"male\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"dr\",\r\n    \"gender\": \"male\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update titleGender3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"mr\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"mr\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"male\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"male\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"gender\": \"male\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update titleGender4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"mrs\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"mrs\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"female\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"female\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mrs\",\r\n    \"gender\": \"female\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update titleGender5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"ms\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"ms\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"male\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"male\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"ms\",\r\n    \"gender\": \"male\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update titleGender6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"dr\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"dr\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"dr\",\r\n    \"gender\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update titleGender7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"mrs\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"mrs\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mrs\",\r\n    \"gender\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update titleGender8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"miss\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"miss\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"other\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"other\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"miss\",\r\n    \"gender\": \"other\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update titleGender9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"mr\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"mr\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"female\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"female\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"mr\",\r\n    \"gender\": \"female\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update amazingTitle (bug005)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"female\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"female\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update amazingGender (bug005)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"koshechkakoshechkakoshechkakoshechkakoshechkakoshechka\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"koshechkakoshechkakoshechkakoshechkakoshechkakoshechka\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 1990-01-01T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1990-01-01T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gender\": \"koshechkakoshechkakoshechkakoshechkakoshechkakoshechka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update enotherDateOfBirth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"koshechkakoshechkakoshechkakoshechkakoshechkakoshechka\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"koshechkakoshechkakoshechkakoshechkakoshechkakoshechka\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 2023-04-07T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"2023-04-07T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string +7 950 9999999\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"+7 950 9999999\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"dateOfBirth\": \"April 7, 2023\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update SwissDateOfBirth 400 BODY_NOT_VALID  (bug006)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string BODY_NOT_VALID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"BODY_NOT_VALID\");\r",
									"});\r",
									"pm.test(\"Body matches string data\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"dateOfBirth\": \"24.01.2011\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update nullPhone (bug007)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"koshechkakoshechkakoshechkakoshechkakoshechkakoshechka\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"koshechkakoshechkakoshechkakoshechkakoshechkakoshechka\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 2023-04-07T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"2023-04-07T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"phone\\\":\\\"0\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"phone\\\":\\\"0\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"phone\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update XSSpicture (bug008)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"koshechkakoshechkakoshechkakoshechkakoshechkakoshechka\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"koshechkakoshechkakoshechkakoshechkakoshechkakoshechka\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 2023-04-07T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"2023-04-07T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"phone\\\":\\\"0\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"phone\\\":\\\"0\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string 109 street\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"109 street\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"NY\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"NY\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string US\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"US\");\r",
									"});\r",
									"pm.test(\"Body matches string 0:00\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0:00\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"picture\": \"<script>alert(123)</script>\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update badLocation (bug009)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"koshechkakoshechkakoshechkakoshechkakoshechkakoshechka\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"koshechkakoshechkakoshechkakoshechkakoshechkakoshechka\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 2023-04-07T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"2023-04-07T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"phone\\\":\\\"0\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"phone\\\":\\\"0\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"street\\\":\\\"\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"street\\\":\\\"\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"0\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"0\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"select * from admins;\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"select * from admins;\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"country\\\":\\\"<script<alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"country\\\":\\\"<script<alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"timezone\\\":\\\"0\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"timezone\\\":\\\"0\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"location\":\r\n        {\r\n            \"street\": \"\",\r\n            \"city\": 0,\r\n            \"state\": \"select * from admins;\",\r\n            \"country\": \"<script<alert(123)</script>\",\r\n            \"timezone\": 0\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update corruptedJSONkeys (bug010)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"koshechkakoshechkakoshechkakoshechkakoshechkakoshechka\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"koshechkakoshechkakoshechkakoshechkakoshechkakoshechka\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 2023-04-07T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"2023-04-07T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"phone\\\":\\\"0\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"phone\\\":\\\"0\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"street\\\":\\\"\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"street\\\":\\\"\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"0\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"0\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"select * from admins;\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"select * from admins;\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"country\\\":\\\"<script<alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"country\\\":\\\"<script<alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"timezone\\\":\\\"0\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"timezone\\\":\\\"0\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tiTLe\": \"dr\",\r\n    \"FirStnaMe\": \"Richard\",\r\n    \"lasTnaMe\": \"Richardson\",\r\n    \"geNdEr\": \"male\",\r\n    \"dATeOFbirTH\": \"1/1/1990\",\r\n    \"PhOne\": \"+7 950 9999999\",\r\n    \"locaTION\":\r\n        {\r\n            \"sTReet\": \"109 street\",\r\n            \"ciTy\": \"NY\",\r\n            \"sTAte\": \"NY\",\r\n            \"coUNtry\": \"US\",\r\n            \"timEZone\": \"0:00\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update corruptedJSONkeys1 (bug10)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string Richard\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richard\");\r",
									"});\r",
									"pm.test(\"Body matches string Richardson\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Richardson\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"gender\\\":\\\"koshechkakoshechkakoshechkakoshechkakoshechkakoshechka\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"gender\\\":\\\"koshechkakoshechkakoshechkakoshechkakoshechkakoshechka\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string name.name20@domain.domain.com\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name.name20@domain.domain.com\");\r",
									"});\r",
									"pm.test(\"Body matches string 2023-04-07T00:00:00.000Z\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"2023-04-07T00:00:00.000Z\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"phone\\\":\\\"0\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"phone\\\":\\\"0\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string location\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"location\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"street\\\":\\\"\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"street\\\":\\\"\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"city\\\":\\\"0\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"city\\\":\\\"0\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"state\\\":\\\"select * from admins;\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"state\\\":\\\"select * from admins;\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"country\\\":\\\"<script<alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"country\\\":\\\"<script<alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"timezone\\\":\\\"0\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"timezone\\\":\\\"0\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string registerDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"registerDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"titl\": \"dr\",\r\n    \"firstNam\": \"Richard\",\r\n    \"lastNam\": \"Richardson\",\r\n    \"gende\": \"male\",\r\n    \"dateOfBirt\": \"\",\r\n    \"phon\": \"+7 900 9999999\",\r\n    \"pictur\": \"https://i.imgur.com/nE4N7js.png\",\r\n    \"locatio\":\r\n        {\r\n            \"stree\": \"109 street\",\r\n            \"cit\": \"NY\",\r\n            \"stat\": \"NY\",\r\n            \"countr\": \"US\",\r\n            \"timezon\": \"0:00\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Post intParams (bug012)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"postId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\\\"55555\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\\\"55555\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\\\"2\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\\\"2\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":-1\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":-1\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":[\\\"8\\\"]\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":[\\\"8\\\"]\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": 55555,\r\n    \"image\": 2,\r\n    \"likes\": -1,\r\n    \"tags\": 8,\r\n    \"owner\": \"{{userId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Post intParams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Post XSSparams (bug012)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"postId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\\\"select * from admins;\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\\\"select * from admins;\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":[\\\"tag1, Tag2\\\"]\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":[\\\"tag1, Tag2\\\"]\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"<script>alert(123)</script>\",\r\n    \"image\": \"select * from admins;\",\r\n    \"likes\": 0,\r\n    \"tags\": \"tag1, Tag2\",\r\n    \"owner\": \"{{userId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post By Id XSSparams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\\\"select * from admins;\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\\\"select * from admins;\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":[\\\"tag1, Tag2\\\"]\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":[\\\"tag1, Tag2\\\"]\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Post XSSparams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Post XSSparams 404 RESOURCE_NOT_FOUND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body matches string RESOURCE_NOT_FOUND\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"RESOURCE_NOT_FOUND\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Post 51CharText (bug012)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"postId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\\\"qwerty51qwertyqwertyqwertyqwertyqwertyqwertyqwertyq\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\\\"qwerty51qwertyqwertyqwertyqwertyqwertyqwertyqwertyq\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\\\"https://dunnnyapi.io/endpoint?fishing=dummyapi.io\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\\\"https://dunnnyapi.io/endpoint?fishing=dummyapi.io\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":-1000\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":-1000\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":[]\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":[]\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"qwerty51qwertyqwertyqwertyqwertyqwertyqwertyqwertyq\",\r\n    \"image\": \"https://dunnnyapi.io/endpoint?fishing=dummyapi.io\",\r\n    \"likes\": -1000,\r\n    \"tags\": 0,\r\n    \"owner\": \"{{userId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Post 51CharText",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Post 50Char",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"postId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\\\"qwerty50qwertyqwertyqwertyqwertyqwertyqwertyqwerty\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\\\"qwerty50qwertyqwertyqwertyqwertyqwertyqwertyqwerty\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\\\"https://i.imgur.com/HFXynW3.png\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\\\"https://i.imgur.com/HFXynW3.png\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":10000\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":10000\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":[\\\"tag1, Tag2\\\"]\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":[\\\"tag1, Tag2\\\"]\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"qwerty50qwertyqwertyqwertyqwertyqwertyqwertyqwerty\",\r\n    \"image\": \"https://i.imgur.com/HFXynW3.png\",\r\n    \"likes\": 10000,\r\n    \"tags\": \"tag1, Tag2\",\r\n    \"owner\": \"{{userId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Post 51Char (bug012)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\\\"qwerty51qwertyqwertyqwertyqwertyqwertyqwertyqwertyq\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\\\"qwerty51qwertyqwertyqwertyqwertyqwertyqwertyqwertyq\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"link\\\":\\\"https://dunnnyapi.io/endpoint?fishing=dummyapi.io\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"link\\\":\\\"https://dunnnyapi.io/endpoint?fishing=dummyapi.io\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":-10000\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":-10000\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":[\\\"9e+65\\\"]\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":[\\\"9e+65\\\"]\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"qwerty51qwertyqwertyqwertyqwertyqwertyqwertyqwertyq\",\r\n    \"link\": \"https://dunnnyapi.io/endpoint?fishing=dummyapi.io\",\r\n    \"image\": \"<script>alert(123)</script>\",\r\n    \"likes\": -10000,\r\n    \"tags\": 900000000000000000000000000000000000000000000000000000000000000000,\r\n    \"owner\": \"{{userId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Post nullText (bug012)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\\\"\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\\\"\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"link\\\":\\\"579\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"link\\\":\\\"579\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\\\"0\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\\\"0\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":9e+65\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":9e+65\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":[\\\"日本のピカチュウ\\\"]\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":[\\\"日本のピカチュウ\\\"]\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"\",\r\n    \"link\": 579,\r\n    \"image\": 0,\r\n    \"likes\": 900000000000000000000000000000000000000000000000000000000000000000,\r\n    \"tags\": \"日本のピカチュウ\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\\\"This is a post preview.\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\\\"This is a post preview.\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"link\\\":\\\"https://dummyapi.io/data/v1/post/64b6a874093a7bd9b786f864\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"link\\\":\\\"https://dummyapi.io/data/v1/post/64b6a874093a7bd9b786f864\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\\\"https://i.imgur.com/HFXynW3.png\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\\\"https://i.imgur.com/HFXynW3.png\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":[\\\"TAG3, taG4\\\"]\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":[\\\"TAG3, taG4\\\"]\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"This is a post preview.\",\r\n    \"link\": \"https://dummyapi.io/data/v1/post/64b6a874093a7bd9b786f864\",\r\n    \"image\": \"https://i.imgur.com/HFXynW3.png\",\r\n    \"likes\": 0,\r\n    \"tags\": \"TAG3, taG4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Post idempotent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\\\"This is a post preview.\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\\\"This is a post preview.\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"link\\\":\\\"https://dummyapi.io/data/v1/post/64b6a874093a7bd9b786f864\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"link\\\":\\\"https://dummyapi.io/data/v1/post/64b6a874093a7bd9b786f864\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\\\"https://i.imgur.com/HFXynW3.png\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\\\"https://i.imgur.com/HFXynW3.png\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":[\\\"TAG3, taG4\\\"]\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":[\\\"TAG3, taG4\\\"]\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"This is a post preview.\",\r\n    \"link\": \"https://dummyapi.io/data/v1/post/64b6a874093a7bd9b786f864\",\r\n    \"image\": \"https://i.imgur.com/HFXynW3.png\",\r\n    \"likes\": 0,\r\n    \"tags\": \"TAG3, taG4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"owner\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"owner\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":20\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":20\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"owner\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"owner\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List By User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"owner\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"owner\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});\r",
									"pm.test(\"Body matches string updatedDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedDate\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":20\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":20\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}/post",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tag List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string tag1\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"tag1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/tag",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"tag"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List By Tag (bug013)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string data\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":20\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":20\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/tag/TAG3/post",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"tag",
								"TAG3",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List By Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string data\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":20\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":20\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/tag/tag1/post",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"tag",
								"tag1",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"owner\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"owner\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":1\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":1\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post?page=1&limit=5",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List By User pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"owner\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"owner\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}/post?page=0&limit=5",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List By Tag pagination (bug013)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string data\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/tag/TAG3/post?page=0&limit=5",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"tag",
								"TAG3",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List pagination1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"owner\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"owner\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":1\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":1\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post?page=1&limit=50",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List By User pagination1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"owner\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"owner\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}/post?page=0&limit=50",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List By Tag pagination1 (bug013)",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/tag/TAG3/post?page=0&limit=50",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"tag",
								"TAG3",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List paginationFixLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"owner\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"owner\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post?page=0&limit=4",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List By User paginationFixLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"owner\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"owner\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}/post?page=0&limit=4",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List By Tag paginationFixLimit (bug013)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string data\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/tag/TAG3/post?page=0&limit=4",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"tag",
								"TAG3",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List paginationFixLimit1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"owner\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"owner\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post?page=0&limit=51",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "51"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List By User paginationFixLimit1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"image\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"image\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"likes\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"likes\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"tags\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"tags\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"text\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"text\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"owner\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"owner\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}/post?page=0&limit=51",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "51"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List By Tag paginationFixLimit1 (bug013)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string data\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/tag/TAG3/post?page=0&limit=51",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"tag",
								"TAG3",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "51"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment 1Char (bug014)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"message\\\":\\\"a\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"message\\\":\\\"a\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string post\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"post\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"a\",\r\n    \"owner\": \"{{userId}}\",\r\n    \"post\": \"{{postId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment 2Chars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"message\\\":\\\"de\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"message\\\":\\\"de\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string post\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"post\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"de\",\r\n    \"owner\": \"{{userId}}\",\r\n    \"post\": \"{{postId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment 500Chars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"message\\\":\\\"comment500commentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcomment\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"message\\\":\\\"comment500commentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcomment\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string post\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"post\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"comment500commentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcomment\",\r\n    \"owner\": \"{{userId}}\",\r\n    \"post\": \"{{postId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment 501Char (bug014)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"message\\\":\\\"comment501commentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentc\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"message\\\":\\\"comment501commentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentc\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string post\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"post\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"comment501commentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentc\",\r\n    \"owner\": \"{{userId}}\",\r\n    \"post\": \"{{postId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment num (bug014)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"message\\\":\\\"22\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"message\\\":\\\"22\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string post\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"post\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": 22,\r\n    \"owner\": \"{{userId}}\",\r\n    \"post\": \"{{postId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment badUser 400 BODY_NOT_VALID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string BODY_NOT_VALID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"BODY_NOT_VALID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"abc\",\r\n    \"owner\": \"64b7f3b1abe33dfbd26fb8qq\",\r\n    \"post\": \"{{postId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment badPost (bug015)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"message\\\":\\\"abc\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"message\\\":\\\"abc\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string post\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"post\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"abc\",\r\n    \"owner\": \"{{userId}}\",\r\n    \"post\": \"64b7f685abe33d62906aaa26\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment asiaChar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"message\\\":\\\"中國皮卡丘\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"message\\\":\\\"中國皮卡丘\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string post\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"post\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"中國皮卡丘\",\r\n    \"owner\": \"{{userId}}\",\r\n    \"post\": \"{{postId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment asiaChar1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"message\\\":\\\"日本のピカチュウ\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"message\\\":\\\"日本のピカチュウ\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string post\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"post\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"日本のピカチュウ\",\r\n    \"owner\": \"{{userId}}\",\r\n    \"post\": \"{{postId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment asiaChar2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"message\\\":\\\"한국\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"message\\\":\\\"한국\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string post\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"post\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"한국\",\r\n    \"owner\": \"{{userId}}\",\r\n    \"post\": \"{{postId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment euroChar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"commentId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"message\\\":\\\"français\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"message\\\":\\\"français\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string post\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"post\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"français\",\r\n    \"owner\": \"{{userId}}\",\r\n    \"post\": \"{{postId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment asiaChar1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/{{commentId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "elete Comment asiaChar1 404 RESOURCE_NOT_FOUND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body matches string RESOURCE_NOT_FOUND\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"RESOURCE_NOT_FOUND\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/{{commentId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment invalidСhar (bug14)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"commentId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"message\\\":\\\"இ ♦◊♦ ♫√£ğå ♫ ♦◊♦ இ◑╣𝓧𝓧𝓛 001𝓜𝓾𝔃𝓱 𝓞𝓵𝓲╠◐\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"message\\\":\\\"இ ♦◊♦ ♫√£ğå ♫ ♦◊♦ இ◑╣𝓧𝓧𝓛 001𝓜𝓾𝔃𝓱 𝓞𝓵𝓲╠◐\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string post\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"post\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"இ ♦◊♦ ♫√£ğå ♫ ♦◊♦ இ◑╣𝓧𝓧𝓛 001𝓜𝓾𝔃𝓱 𝓞𝓵𝓲╠◐\",\r\n\t\"owner\": \"{{userId}}\",\r\n    \"post\": \"{{postId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment null (bug14)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"commentId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"message\\\":\\\"\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"message\\\":\\\"\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string post\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"post\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"\",\r\n\t\"owner\": \"{{userId}}\",\r\n    \"post\": \"{{postId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment XXS (bug14)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"commentId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"message\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"message\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string post\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"post\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"<script>alert(123)</script>\",\r\n\t\"owner\": \"{{userId}}\",\r\n    \"post\": \"{{postId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment SQL (bug14)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"commentId\", jsonData.id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"message\\\":\\\"select * from admins;\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"message\\\":\\\"select * from admins;\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"title\\\":\\\"lordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlordlord\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"firstName\\\":\\\"Richard\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"firstName\\\":\\\"Richard\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"lastName\\\":\\\"Richardson\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\":\\\"Richardson\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"picture\\\":\\\"<script>alert(123)</script>\\\"\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"picture\\\":\\\"<script>alert(123)</script>\\\"\");\r",
									"});\r",
									"pm.test(\"Body matches string post\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"post\");\r",
									"});\r",
									"pm.test(\"Body matches string publishDate\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"publishDate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"select * from admins;\",\r\n\t\"owner\": \"{{userId}}\",\r\n    \"post\": \"{{postId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment/create",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List By User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":20\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":20\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}/comment",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List By Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":20\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":20\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}/comment",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":20\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":20\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List By User pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}/comment?page=0&limit=5",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}",
								"comment"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List By Post pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":1\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":1\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}/comment?page=1&limit=5",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}",
								"comment"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":2\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":2\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment?page=2&limit=5",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List By User pagination1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":50\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":50\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}/comment?page=0&limit=50",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}",
								"comment"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List By Post pagination1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":50\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":50\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}/comment?page=0&limit=50",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}",
								"comment"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List pagination1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":1\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":1\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":50\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":50\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment?page=1&limit=50",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List By User paginationFixLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}/comment?page=0&limit=4",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}",
								"comment"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List By Post paginationFixLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}/comment?page=0&limit=4",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}",
								"comment"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List paginationFixLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment?page=0&limit=4",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List By User paginationFixLimit1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":50\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":50\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}/comment?page=0&limit=51",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}",
								"comment"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "51"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List By Post paginationFixLimit1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":0\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":0\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":50\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":50\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/post/{{postId}}/comment?page=0&limit=51",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"post",
								"{{postId}}",
								"comment"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "51"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List paginationFixLimit1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"pm.test(\"Body matches string message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"pm.test(\"Body matches string owner\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
									"});\r",
									"pm.test(\"Body matches string title\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"pm.test(\"Body matches string firstName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"pm.test(\"Body matches string lastName\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"pm.test(\"Body matches string picture\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"picture\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"total\\\":\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"total\\\":\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"page\\\":5\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"page\\\":5\");\r",
									"});\r",
									"pm.test(\"Body matches string \\\"limit\\\":50\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\\\"limit\\\":50\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/comment?page=5&limit=51",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"comment"
							],
							"query": [
								{
									"key": "page",
									"value": "5"
								},
								{
									"key": "limit",
									"value": "51"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User minParams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment List By User deletedUser 404 RESOURCE_NOT_FOUND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body matches string RESOURCE_NOT_FOUND\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"RESOURCE_NOT_FOUND\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}/comment",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post List By User deletedUser 404 RESOURCE_NOT_FOUND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body matches string RESOURCE_NOT_FOUND\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"RESOURCE_NOT_FOUND\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}/post",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User By Id deletedUser 404 RESOURCE_NOT_FOUND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body matches string RESOURCE_NOT_FOUND\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"RESOURCE_NOT_FOUND\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dummyapi.io/data/v1/user/{{userId}}",
							"protocol": "https",
							"host": [
								"dummyapi",
								"io"
							],
							"path": [
								"data",
								"v1",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "app-id",
				"type": "string"
			},
			{
				"key": "value",
				"value": "649bf016bb0f223608d48cff",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}